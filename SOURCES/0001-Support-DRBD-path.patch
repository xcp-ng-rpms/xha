From 33fc7c13528382caec12120571d3bdee9a72f185 Mon Sep 17 00:00:00 2001
From: Ronan Abhamon <ronan.abhamon@vates.tech>
Date: Tue, 2 Sep 2025 16:06:21 +0200
Subject: [PATCH] Support DRBD path

A DRBD device can only be used by one process at the same time, so only one file descriptor can be opened.
Unfortunately xhad opens one descriptor per host on the heartbeat VDI. In the case of LINSTOR this mechanism
does not work with DRBD VDIs, the solution in this case is to open a descriptor only when a read or write is executed
(the descriptor is closed after the request). If another host tries to do the same thing, we put the daemon to sleep.

Signed-off-by: Ronan Abhamon <ronan.abhamon@vates.tech>
---
 daemon/statefile.c | 52 +++++++++++++++++++++++++++++++++++++++-------
 lib/statefileio.c  | 35 ++++++++++++++++++++++++++++++-
 2 files changed, 79 insertions(+), 8 deletions(-)

diff --git a/daemon/statefile.c b/daemon/statefile.c
index 5f01f6a..284408b 100755
--- a/daemon/statefile.c
+++ b/daemon/statefile.c
@@ -73,6 +73,9 @@
 //
 //
 
+extern int
+is_drbd_device(
+      const char *path);
 
 //
 //
@@ -122,8 +125,11 @@ static struct {
 //  Internal data for this module
 //
 
+#define SFVAR_FLAG_DRBD (1 << 0)
+
 static struct {
     int                 sfdesc;                 //  File descriptor for the State-File
+    int                 flags;
     MTC_BOOLEAN         terminate;
     MTC_U32             sequence;
     pthread_t sf_thread;
@@ -152,6 +158,19 @@ static struct {
     } readlatency, writelatency;
 } sfvar = { 0 };
 
+static inline int open_desc()
+{
+    return sfvar.flags & SFVAR_FLAG_DRBD ? sf_open(_sf_path) : sfvar.sfdesc;
+}
+
+static inline void close_desc(int sfdesc)
+{
+    if (sfvar.flags & SFVAR_FLAG_DRBD)
+    {
+        sf_close(sfdesc);
+    }
+}
+
 //  lock
 #define sf_lock()   ((void)pthread_spin_lock(&sfvar.lock))
 #define sf_unlock() ((void)pthread_spin_unlock(&sfvar.lock))
@@ -303,6 +322,7 @@ sf_initialize0()
     //  Initialize sfvar
 
     sfvar.sfdesc = -1,
+    sfvar.flags = 0,
     sfvar.watchdog = INVALID_WATCHDOG_HANDLE_VALUE,
     sfvar.terminate = FALSE,
 
@@ -407,15 +427,25 @@ sf_initialize0()
 
     //  Open the State-File
 
-    if ((sfvar.sfdesc = sf_open(_sf_path)) < 0)
+    const int sfdesc = sf_open(_sf_path);
+    if (sfdesc < 0)
     {
-        sfvar.sfdesc = -1;
         status = MTC_ERROR_SF_OPEN;
         log_internal(MTC_LOG_ERR,
-                    "SF: cannot open the State-File %s.\n", _sf_path);
+                    "SF: cannot open the State-File %s. (sys %d)\n", _sf_path, errno);
         goto error;
     }
 
+    if (is_drbd_device(_sf_path))
+    {
+        sfvar.flags |= SFVAR_FLAG_DRBD;
+        sf_close(sfdesc);
+    }
+    else
+    {
+        sfvar.sfdesc = sfdesc;
+    }
+
     return MTC_SUCCESS;
 
 error:
@@ -588,7 +618,9 @@ sfthread(
             case    MTC_ERROR_SF_PENDING_WRITE:
                 if ((status = FIST_global_write()) == MTC_SUCCESS)
                 {
-                    status = sf_writeglobal(sfvar.sfdesc, &StateFile.global);
+                    const int sfdesc = open_desc();
+                    status = sf_writeglobal(sfdesc, &StateFile.global);
+                    close_desc(sfdesc);
                 }
 
                 if (status != MTC_SUCCESS && print_status != PSTATUS_ERROR)
@@ -661,7 +693,9 @@ readsf()
         {
             if ((iostatus.global_section = FIST_global_read()) == MTC_SUCCESS)
             {
-                iostatus.global_section = sf_readglobal(sfvar.sfdesc, &StateFile.global, _gen_UUID);
+                const int sfdesc = open_desc();
+                iostatus.global_section = sf_readglobal(sfdesc, &StateFile.global, _gen_UUID);
+                close_desc(sfdesc);
             }
         }
 
@@ -671,8 +705,10 @@ readsf()
             {
                 if ((iostatus.host_section[host_index] = FIST_hostspecific_read()) == MTC_SUCCESS)
                 {
+                    const int sfdesc = open_desc();
                     iostatus.host_section[host_index] =
-                            sf_readhostspecific(sfvar.sfdesc, host_index, &StateFile.host[host_index]);
+                            sf_readhostspecific(sfdesc, host_index, &StateFile.host[host_index]);
+                    close_desc(sfdesc);
                 }
 
                 if (iostatus.host_section[host_index] == MTC_SUCCESS)
@@ -979,7 +1015,9 @@ write_hostspecific()
 
     if ((status = FIST_hostspecific_write()) == MTC_SUCCESS)
     {
-        status = sf_writehostspecific(sfvar.sfdesc, _my_index, phost);
+        const int sfdesc = open_desc();
+        status = sf_writehostspecific(sfdesc, _my_index, phost);
+        close_desc(sfdesc);
     }
 
     if (status != MTC_SUCCESS)
diff --git a/lib/statefileio.c b/lib/statefileio.c
index 1b0593e..63d0925 100755
--- a/lib/statefileio.c
+++ b/lib/statefileio.c
@@ -88,6 +88,9 @@
 
 extern STATE_FILE StateFile;
 
+#define OPEN_ATTEMPTS 10
+#define OPEN_SLEEP_INTERVAL 1000
+
 //
 //
 //  F U N C T I O N   P R O T O T Y P E S
@@ -107,11 +110,41 @@ sf_FIST_delay_on_write();
 //
 
 
+extern int
+is_drbd_device(
+      const char *path)
+{
+    static const int drbd_major = 147;
+
+    struct stat stats;
+    if (stat(path, &stats) == -1)
+    {
+        return -1;
+    }
+    return S_ISBLK(stats.st_mode) && major(stats.st_rdev) == drbd_major;
+}
+
 extern int
 sf_open(
     char *path)
 {
-    return open(path, (O_RDWR | O_DIRECT));
+    int fd = open(path, (O_RDWR | O_DIRECT));
+    if (fd < 0 && errno == EROFS && is_drbd_device(path))
+    {
+        int attempt;
+        for (attempt = 0; attempt < OPEN_ATTEMPTS; ++attempt)
+        {
+            if ((fd = open(path, (O_RDWR | O_DIRECT)) < 0) && errno == EROFS)
+            {
+                sf_sleep(OPEN_SLEEP_INTERVAL);
+            }
+            else
+            {
+                break;
+            }
+        }
+    }
+    return fd;
 }
 
 extern int
